/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.finalproject;

import com.google.gson.Gson;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Mitchell Romani
 */
public class TeamSelectGUI extends javax.swing.JFrame {
    
    //creates a static team to access elsewhere
    private static ArrayList<Pokemon> finalTeam;
    //create the enemy champion team
    private static ArrayList<Pokemon> championTeam = new ArrayList<>();
    //make this private and add a getter function
    private JFileChooser fileChooser = new JFileChooser();
    private ArrayList<File> savedTeams = new ArrayList<>();
    
    //Small Getter Functions
    public static ArrayList<Pokemon> getFinalTeam(){
        return finalTeam;
    }
    public static ArrayList<Pokemon> getChampionTeam(){
        return championTeam;
    }
    
    //class for list models
    private class CustomListModel extends AbstractListModel<String>{
        protected ArrayList<Pokemon> list = new ArrayList<>();

        public CustomListModel(){
            super();
        }
        
        @Override
        public int getSize() {
            return list.size();
        }

        @Override
        public String getElementAt(int index) {
            return list.get(index).getName();
        }
        
        public Pokemon getPokemonAt(int index) {
            return list.get(index);
        }
        
        public void addElement(Pokemon p){
            list.add(p);
            int t = list.size()-1;
            fireContentsChanged(this, t, t);
        }
        
        public void removeElement(int index){
            if(!list.isEmpty()){
                list.remove(index);
                fireContentsChanged(this, index, list.size()-1); 
            }
        }
    }
    //sub class for the team list model so it displays
    private class PlayerListModel extends CustomListModel{
        public PlayerListModel(){
            super();
        }

        @Override
        public String getElementAt(int index) {
            return list.get(index).getFullInfo();
        }
        
        public ArrayList<Pokemon> getPlayerTeam(){
            return list;
        }
    }  
    /**
     * Creates new form TeamSelectGUI
     */
    public TeamSelectGUI() {
        initComponents();
        
        //bring in url helper to get pokemon
        URLHelper urlHelper = new URLHelper();
        
        PlayerListModel team = new PlayerListModel();
        jlstPlayerTeam.setModel(team);
        
        CustomListModel options = new CustomListModel();
        
        //for loop to retrieve 151 pokemon
        int pokemonIndex;
        for (pokemonIndex = 1; pokemonIndex < 152; pokemonIndex ++){
           Pokemon tmp = urlHelper.getPokemon(pokemonIndex);
           options.addElement(tmp); 
           tmp.initialLoadStats();
           //add champion pokemon
           if (pokemonIndex == 18 || (pokemonIndex == 65) || (pokemonIndex == 112) || (pokemonIndex == 59) || (pokemonIndex == 130) || (pokemonIndex == 3)){
               championTeam.add(tmp);
           }
        }
        
        ///uncomment to test a smaller pool of pokemon
//        for (pokemonIndex = 1; pokemonIndex < 7; pokemonIndex ++){
//           newPokemon tmp = urlHelper.getPokemon(pokemonIndex);
//           tmp.initialLoadStats();
//           options.addElement(tmp); 
//           if ((pokemonIndex == 2) || (pokemonIndex == 3)){
//               championTeam.add(tmp);
//           }
//        }

        jlstPokeOptions.setModel(options);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlstPlayerTeam = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlstPokeOptions = new javax.swing.JList<>();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnFinish = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        imgLabel1 = new javax.swing.JLabel();
        imgLabel2 = new javax.swing.JLabel();
        imgLabel3 = new javax.swing.JLabel();
        imgLabel4 = new javax.swing.JLabel();
        imgLabel5 = new javax.swing.JLabel();
        imgLabel6 = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jlstPlayerTeam.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jlstPlayerTeam.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jlstPlayerTeam.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jlstPlayerTeam);

        jlstPokeOptions.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jlstPokeOptions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jlstPokeOptions);

        btnAdd.setText("Add to Team");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove from Team");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnFinish.setText("Finish");
        btnFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishActionPerformed(evt);
            }
        });

        btnSave.setText("Save Team");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnLoad.setText("Load Team");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        jLabel1.setText("Player Team");

        jLabel2.setText("Available");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFinish, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRemove)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imgLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imgLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imgLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imgLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imgLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imgLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(imgLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imgLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imgLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imgLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imgLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imgLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        PlayerListModel team = ((PlayerListModel)jlstPlayerTeam.getModel());
        CustomListModel options = ((CustomListModel)jlstPokeOptions.getModel());
        
        //get selected pokemon from the options list
        int selection = jlstPokeOptions.getSelectedIndex();
        if(!team.list.contains(options.getPokemonAt(selection))){
            //If the selection is not -1 and less than the size of list and the teams size is less than 6 then add it
            if (selection != -1 && selection < options.getSize() && team.getSize() < 6) {
                //add pokemon to list
                team.addElement(options.getPokemonAt(selection));
                //add image to label
                JLabel[] lblArray = new JLabel[]{imgLabel1, imgLabel2, imgLabel3, imgLabel4, imgLabel5, imgLabel6};
                Pokemon tmpP = team.getPokemonAt(team.getSize() - 1);
                try {
                    URL imgURL = new URL(tmpP.getSprites().getImg());
                    ImageIcon finalImage = new ImageIcon(imgURL);
                    lblArray[team.getSize() - 1].setIcon(finalImage);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(TeamSelectGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Team cannot contain multiple of the same pokemon.", "Warning", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        PlayerListModel team = ((PlayerListModel)jlstPlayerTeam.getModel());
        JLabel[] lblArray = new JLabel[]{imgLabel1, imgLabel2, imgLabel3, imgLabel4, imgLabel5, imgLabel6};
        
        //get selection from the player team to remove
        int selection = jlstPlayerTeam.getSelectedIndex();
        //If its not -1, team size is greater than 0, and selection is less than team size then remove
        if (selection != -1 && team.getSize() > 0 && selection < team.getSize()) {
            //remove from team
            team.removeElement(selection);
            //set the last image to null
            lblArray[team.getSize()].setIcon(null);
            
            //fix the order of images
            for (int i = selection; i < team.getSize(); i++) {
                try {
                    Pokemon tmpP = team.getPokemonAt(i);
                    URL imgURL = new URL(tmpP.getSprites().getImg());
                    ImageIcon finalImage = new ImageIcon(imgURL);
                    lblArray[i].setIcon(finalImage);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(TeamSelectGUI.class.getName()).log(Level.SEVERE, null, ex);
                } 
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishActionPerformed
        String[] options = { "Chamion Battle", "Cancel" };
        PlayerListModel team = ((PlayerListModel)jlstPlayerTeam.getModel());
        //make sure there is at least one pokemon in team
        if (team.getSize() > 0){
            //get choice
            int choice = JOptionPane.showOptionDialog(null, "Choose a Battle Option", "Battle",
                 JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                 null, options, options[0]);
            //Elite 4 game options
            if (choice == 0) {
                finalTeam = team.list;
                new BattleScreen().setVisible(true);
                TeamSelectGUI.this.setVisible(false);
            } else if (choice == 1){                    //Random option
                finalTeam = team.list;
                new BattleScreen().setVisible(true);
                TeamSelectGUI.this.setVisible(false);
            }
        } else {
            JOptionPane.showMessageDialog(null,"Your team must have at least one member", "Not Enough Members", JOptionPane.ERROR_MESSAGE);
            
        }
    }//GEN-LAST:event_btnFinishActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        //Ask for a save file name
        //MAKE SURE ITS A VALID FILENAME
        String fileName = JOptionPane.showInputDialog(null, "Please Enter a Name for the Save File.");
        if (fileName != null){
            //Set Up new file and filewriter, used code from class in StateExamplesWindow
            FileWriter fw = null;
            try {
                PlayerListModel teamListModel = ((PlayerListModel)jlstPlayerTeam.getModel());
                
                File file = new File("teams/" + fileName);
                fw = new FileWriter(file);
                Gson gson = new Gson();
                gson.toJson(teamListModel.getPlayerTeam(), fw);
                savedTeams.add(file);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "File could not be saved", "ERROR", JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    if (fw != null)
                        fw.close();
                } catch (IOException ex){
                    JOptionPane.showMessageDialog(this, "Couldn't close file?", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        //Bring up a dialog to choose a file
        
        File teamDir = new File("/Users/mitch/OneDrive/Documents/NetBeansProjects/FinalProject/teams");
        //Some components of this code were used from https://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html
        fileChooser.setCurrentDirectory(teamDir);
        int returnVal = fileChooser.showOpenDialog(this);
        File file = null;
        if (returnVal == JFileChooser.APPROVE_OPTION){
            file = fileChooser.getSelectedFile();


            FileReader fr = null;
            PlayerListModel teamListModel = ((PlayerListModel)jlstPlayerTeam.getModel());
            JLabel[] lblArray = new JLabel[]{imgLabel1, imgLabel2, imgLabel3, imgLabel4, imgLabel5, imgLabel6};

            try {
                fr = new FileReader(file);
                Gson gson = new Gson();
                Pokemon[] team = gson.fromJson(fr, Pokemon[].class);
                for (int i = teamListModel.getSize() - 1; i >= 0; i--){
                    teamListModel.removeElement(i);
                    lblArray[i].setIcon(null);
                }
                for (int i = 0; i < team.length; i++){
                    teamListModel.addElement(team[i]);
                    URL imgUrl = new URL(team[i].getSprites().getImg());
                    ImageIcon finalImage = new ImageIcon(imgUrl);
                    lblArray[i].setIcon(finalImage);
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "File could not be loaded", "ERROR", JOptionPane.ERROR_MESSAGE);
            } finally {
                try {
                    if (fr != null)
                        fr.close();
                } catch (IOException ex) {
                    Logger.getLogger(TeamSelectGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "File could not be loaded \nPlease select a valid saved team file", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        //end use of features from oracle
    }//GEN-LAST:event_btnLoadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeamSelectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeamSelectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeamSelectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeamSelectGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TeamSelectGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnFinish;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel imgLabel1;
    private javax.swing.JLabel imgLabel2;
    private javax.swing.JLabel imgLabel3;
    private javax.swing.JLabel imgLabel4;
    private javax.swing.JLabel imgLabel5;
    private javax.swing.JLabel imgLabel6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> jlstPlayerTeam;
    private javax.swing.JList<String> jlstPokeOptions;
    // End of variables declaration//GEN-END:variables
}
